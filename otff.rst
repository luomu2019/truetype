OpenType 字体文件
=================

OpenType
字体文件包含用于呈现文本的表格格式的数据。应用程序使用部分数据来计算使用字体的文本布局；也就是说，字形的选择及其在一行中的位置。其他数据将字形描述为
TrueType 或紧凑字体格式 (CFF) 轮廓。还有其他数据可以提供单色或彩色位图或
SVG
文档作为替代字形描述。字体数据还包括元信息，例如可用于将字体呈现为字体选择器用户界面中的可用选项的名称字符串。这些类型的数据中的每一种都存储在一个或多个表中，每个表都是为特定目的而设计的。

文件名
-------------------------

OpenType 字体文件应使用扩展名 .OTF、.TTF、.OTC 或
.TTC。（扩展名可以是大写或小写。）扩展名 .OTC 和 .TTC
只能用于\ `字体集合 <#collections>`__\ 文件。有关文件扩展名约定的更多信息，请参阅\ `OpenType
字体建议中的 <recom#filenames>`__\ “文件名” 。

数据类型
----------------------------

OpenType 字体文件中使用以下数据类型。所有 OpenType
字体都使用摩托罗拉风格的字节排序（Big Endian）：

+------------+--------------------------------------------------------+
| 数据类型   | 描述                                                   |
+------------+--------------------------------------------------------+
| uint8      | 8 位无符号整数。                                       |
+------------+--------------------------------------------------------+
| int8       | 8 位有符号整数。                                       |
+------------+--------------------------------------------------------+
| uint16     | 16 位无符号整数。                                      |
+------------+--------------------------------------------------------+
| int16      | 16 位有符号整数。                                      |
+------------+--------------------------------------------------------+
| uint24     | 24 位无符号整数。                                      |
+------------+--------------------------------------------------------+
| uint32     | 32 位无符号整数。                                      |
+------------+--------------------------------------------------------+
| int32      | 32 位有符号整数。                                      |
+------------+--------------------------------------------------------+
| 固定的     | 32 位有符号定点数 (16.16)                              |
+------------+--------------------------------------------------------+
| F字        | int16 描述字体设计单位中的数量。                       |
+------------+--------------------------------------------------------+
| 超词       | uint16 以字体设计单位描述数量。                        |
+------------+--------------------------------------------------------+
| F2DOT14    | 带有小数的低 14 位 (2.14) 的 16 位有符号固定数。       |
+------------+--------------------------------------------------------+
| 长日期时间 | 日期和时间以 UTC 1904 年 1 月 1 日午夜 12:00           |
|            | 后的秒数表示。该值表示为带符号的 64 位整数。           |
+------------+--------------------------------------------------------+
| 标签       | 四个 uint8（长度 = 32                                  |
|            | 位）的数组                                             |
|            | ，用于标识表格、设计变化轴、脚本、语言系统、功能或基线 |
+------------+--------------------------------------------------------+
| 偏移量16   | 表的短偏移量，与 uint16 相同，NULL 偏移量 = 0x0000     |
+------------+--------------------------------------------------------+
| 偏移量24   | 表的 24 位偏移量，与 uint24 相同，NULL 偏移量 =        |
|            | 0x000000                                               |
+------------+--------------------------------------------------------+
| 偏移量32   | 表的长偏移量，与 uint32 相同，NULL 偏移量 = 0x00000000 |
+------------+--------------------------------------------------------+
| 版本16点16 | 包含主要和次要版本号的 32位值。                        |
+------------+--------------------------------------------------------+

F2DOT14 格式由一个带符号的 2的补码整数和一个无符号小数组成。要计算实际值，请取整数并加上分数。2.14
值的示例是：

========= ========== ==== ===========
十进制值  十六进制值 整数 分数
1.999939  0x7fff     1    16383/16384
1.75      0x7000     1    12288/16384
0.000061  0x0001     0    1/16384
0.0       0x0000     0    0/16384
-0.000061 0xffff     -1   16383/16384
-2.0      0x8000     -2   0/16384
========= ========== ==== ===========

Tag 值是一个 uint8 数组。数组中的每个字节必须具有 0x20 到 0x7E
范围内的值。这对应于 UTF-8 编码中 Unicode Basic Latin
字符的取值范围，与可打印的 ASCII
字符相同。因此，可以将标签值重新解释为四字符序列，这就是它们的传统引用方式。然而，形式上，该值是一个字节数组。当重新解释为字符时，标签值区分大小写。它必须有
1 到 4 个非空格字符，并用尾随空格填充（字节值
0x20）。空格字符后面不能跟非空格字符。

在本规范中，许多结构是根据上面列出的数据类型定义的。结构的特征是\ *记录*\ 或\ *表*\ 。记录和表之间的区别基于以下一般标准：

-  表由偏移量引用。如果表包含子结构的偏移量，则偏移量通常从该表的开头开始。
-  记录在父结构中按顺序出现，可以在表字段序列中，也可以在给定类型的记录数组中。如果记录包含子结构的偏移量，则该结构在逻辑上是记录的父表的子表，并且偏移量通常从父表的开头开始。

在某些情况下，当给定的子表是可选的时，子表偏移的字段被记录为允许 NULL
值。例如，在\ `BASE 表头 <base#base-header>`__\ 中，horizAxisOffset 和
vertAxisOffset 字段可能为
NULL，这意味着任何一个子表（或两者）都是可选的。NULL
子表偏移量始终表示给定的子表不存在。应用程序永远不应将 NULL
偏移值解释为子表数据的偏移量。对于子表偏移字段未记录为允许 NULL
值的情况，字体编译器必须包含指定格式的子表，即使它是没有进一步数据的标题存根（例如，\ `覆盖 <chapter2#coverage-table>`__\ 没有字形
ID 的表）。但是，解析字体数据的应用程序应该预期具有 NULL
子表偏移量的不符合字体数据，其中只需要一个非 NULL 值。

表版本号
---------------------------------------

大多数表格都有版本号，整个字体的版本号都包含在\ `Table
Directory <#tabledirectory>`__\ 中。请注意，有五种不同的版本号类型，每种都有自己的编号方案。

-  单个 uint16 字段。这在许多表中使用，通常版本从零 (0) 开始。
-  单独的 uint16 主要和次要版本字段。这在许多表中使用，通常版本从 1.0
   开始。
-  具有枚举值的 uint32 字段。
-  具有数值的 uint32
   字段。这仅在\ `DSIG <dsig>`__\ 和\ `“元” <meta>`__\ 表中使用。
-  主要/次要版本号的 Version16Dot16 字段。这仅在'maxp
   `' <maxp>`__\ 、\ `'post' <post>`__\ 和\ `'vhea' <vhea>`__\ 表中使用。

Version16Dot16
类型用于某些表的版本字段，仅出于向后兼容的原因。（在早期版本中，这些字段被记录为使用
Fixed 值，但具有不遵循 Fixed 类型定义的次要版本号。） Version16Dot16
是一个压缩值：高 16 位包含一个主要版本号，而低 16
位，次要版本。非零次要版本号使用低 16 位的最高半字节中的数字 0 到 9
表示。例如，'maxp' 表版本 0.5 的版本字段为 0x00005000，'vhea' 表版本 1.1
的版本字段为
0x00011000。此类型仅用于“maxp”、“post”和“vhea”表，以后不会用于任何其他表。

表目录使用 uint32
字段，sfntVersion，枚举定义的值，其中一些代表四字符标签；有关详细信息，请参阅下面的“OpenType
字体的组织”部分。

读取表的实现必须包含检查版本号的代码，以便在格式和版本号发生变化时，旧实现将优雅地处理新版本。

次要版本号更改始终意味着兼容扩展的格式更改。如果实现了解主要版本号，那么它可以安全地继续读取该表。如果次要版本大于实现识别的最新版本，则实现将无法检测到扩展字段。

出于兼容性目的，使用单个 uint16 或 uint32
值表示的版本号被视为次要版本号，并且任何格式更改都是兼容的扩展。

请注意，在早期版本中未定义或保留的某些字段值可能会在次要版本更改中被赋予含义。实现不应该对保留或未分配的值或位字段中的位做出假设，并且如果遇到它们可以忽略它们。写入字体数据时，工具应始终为保留字段或位写入零。验证器应警告未为验证数据的给定版本定义的字段或位的任何非零值。

如果无法识别主要版本，则实现不得读取该表，因为它不能对二进制数据的解释做出任何假设。实现应将表视为缺失。

OpenType 字体的组织
-------------------------------------------------------------

OpenType 格式的一个关键特征是 TrueType sfnt
“包装器”，它以通用和可扩展的方式为表集合提供组织。

表目录
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

OpenType
字体以表目录开头，表目录是一种字体中顶级表的目录。如果字体文件仅包含一种字体，则表目录将从文件的字节
0 开始。如果字体文件是 OpenType 字体集合文件（见下文），则在 TTCHeader
中指示每种字体的表目录的起点。

*表目录：*

+--------+-------------------+---------------------------------------+
| 类型   | 姓名              | 描述                                  |
+--------+-------------------+---------------------------------------+
| uint32 | sfnt版本          | 0x00010000 或 0x4F54544F ('OTTO') —   |
|        |                   | 见下文。                              |
+--------+-------------------+---------------------------------------+
| uint16 | numTables         | 表数。                                |
+--------+-------------------+---------------------------------------+
| uint16 | 搜索范围          | 2 的最大幂小于或等于 numTables，乘以  |
|        |                   | 16 ((2**floor(log2(numTables))) \*    |
|        |                   | 16，其中“**”是幂运算符）。            |
+--------+-------------------+---------------------------------------+
| uint16 | 入口选择器        | :sub:`2`\ 的最大幂的log 2小于或等于   |
|        |                   | numTables (log :sub:`2`               |
|        |                   | (searchRange/16)，即等于 floor(log    |
|        |                   | :sub:`2` (numTables)))。              |
+--------+-------------------+---------------------------------------+
| uint16 | 范围移位          | numTables 乘以 16，减去 searchRange   |
|        |                   | ((numTables \* 16) - searchRange)。   |
+--------+-------------------+---------------------------------------+
| 表记录 | 表记录[numTables] | 表格记                                |
|        |                   | 录数组——字体中的每个顶级表格都有一个  |
+--------+-------------------+---------------------------------------+

..

   *注意：*\ 在上表中，符号“**”是指数运算符，在几种编程语言中都有使用。

包含 TrueType 轮廓的 OpenType 字体应为 sfntVersion 使用 0x00010000
的值。包含 CFF 数据（版本 1 或 2）的 OpenType 字体应使用
0x4F54544F（“OTTO”，当重新解释为标签时）作为 sfntVersion。

   *注意：* TrueType 字体的 Apple 规范允许 sfnt 版本使用 'true' 和
   'typ1'。这些版本标签不应用于 OpenType 字体。

表目录格式允许大量表。为了帮助进行快速二分搜索，包含
searchRange、entrySelector 和 rangeShift
字段作为可用于配置搜索算法的参数。特别是，当条目数为 2
的幂时，二分搜索是最佳的。searchRange
字段提供了可以使用该约束搜索的最大项目数（2 的最大幂）。rangeShift
字段提供了还需要搜索的剩余项目数。entrySelector
字段表示需要输入二叉树的最大级别数。值乘以 16，即每个 TableRecord
的大小。

在硬件功能有限的设备上的早期实现中，searchRange、entrySelector 和
rangeShift
字段提供的优化非常重要。它们在现代设备上的重要性较低，但仍可能在某些实现中使用。但是，不正确的值可能会被用作针对某些实现的攻击向量。由于这些值可以在解析文件时从
numTables 字段导出，因此强烈建议解析实现不要依赖字体中的
searchRange、entrySelector 和 rangeShift 字段，而是独立于 numTables
导出它们。但是，字体文件应继续为这些字段提供有效值，以保持与所有现有实现的兼容性。

*表记录：*

======== ====== ======================
类型     姓名   描述
标签     表标签 表标识符。
uint32   校验和 此表的校验和。
偏移量32 抵消   字体文件开头的偏移量。
uint32   长度   此表的长度。
======== ====== ======================

表格标签是给 OpenType
字体文件中表格的名称。表格记录数组使给定字体可以只包含它实际需要的那些表格。因此，numTables
没有标准值。数组中的记录必须按标签升序排序。

有关格式正确的标记值的要求，请参阅上面的\ `数据类型 <#dataTypes>`__\ 。本规范中定义了几个标签及其相关的表格格式。对于本规范中定义的表格标签，字体资源最多应该有一个使用给定标签的表格记录。如果字体资源确实包含多个给定类型的表，则行为是不可预测的：应用程序或平台可能会任意选择其中一个表，或者可能会拒绝该字体为无效。

可以定义额外的表格和相关标签以支持其他平台。例如，请参阅 Apple
的\ `TrueType
参考手册 <https://developer.apple.com/fonts/TrueType-Reference-Manual/>`__\ ，该手册定义了各种表以及
OpenType
中未定义的相关标签。一些字体开发工具也可能定义特殊的表格。包含此类附加表格的字体如果满足本规范的要求，仍然可以作为
OpenType
字体。对于在本规范之外定义的自定义表，此类表的外部规范可能允许在单个字体资源中使用该类型的多个表。当其他供应商定义自定义标签时，他们应通知
Microsoft 以确保在 OpenType 未来扩展时的前向兼容性。

   *注意：* `Apple
   的规范 <https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6.html>`__\ 规定，由所有小写字母组成的标签名称保留供
   Apple 使用。

所有表必须以四字节边界开始，表之间的任何剩余空间必须用零填充。每张表的长度应以数据的实际长度记录在表记录中，而不是填充长度。

   注意：四字节对齐的要求仅适用于顶级表，不适用于子表偏移量、记录或表或记录中的字段。

一些表的内部结构具有位于指定偏移处的子表，因此，可以使用交错的不同表的数据构造字体。通常，顶级表应连续排列，而不会重叠不同表的范围。然而，在任何情况下，表长度测量包含表的所有数据的连续字节范围。这适用于任何子表以及顶级表。

计算校验和
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

表校验和是给定表的 uint32 单位的无符号总和。在 C
中，可以使用以下函数来确定校验和：

.. code:: 

   uint32
   CalcTableChecksum(uint32 *Table, uint32 Length)
   {
       uint32 Sum = 0L;
       uint32 *Endptr = Table+((Length+3) & ~3) / sizeof(uint32);
       while (Table < EndPtr)
           Sum += *Table++;
       return Sum;
   }

..

   *注意：*\ 此函数假定任何表的长度是四字节的倍数，或者表用零到四字节对齐的偏移量填充。但是，TableDirectory
   中记录的实际表长度不应包括填充。为了容纳长度不是四的倍数的数据，必须修改上述算法以将数据视为包含零填充到长度为四的倍数的数据。

“头”表是校验和计算中的一种特殊情况，因为它包含一个校验和调整字段，该字段是在计算表的校验和并写入表目录条目之后计算和写入的，必然会使该校验和值无效。

生成字体数据时，要计算并写入“head”表校验和和校验和调整字段，请执行以下操作：

#. 将 checksumAdjustment 字段设置为 0。
#. 计算包括“头”表在内的所有表的校验和，并将每个表的值输入到表目录中的相应记录中。
#. 计算整个字体的校验和。
#. 从 0xB1B0AFBA 中减去该值。
#. 将结果存储在“头”表 checksumAdjustment 字段中。

尝试验证“头”表未更改的应用程序应计算该表的校验和，假设
checksumAdjustment
值为零，而不是字体中的实际值，然后将结果与“头”表中的记录进行比较。表目录。

在字体集合文件中（见下文），表校验和必须反映集合文件中的表。'head'
表中的 checksumAdjustment 字段不用于集合文件，可以设置为零。

字体集合
----------------------------------

OpenType 字体集合（以前称为 TrueType
集合）是一种在单个文件结构中提供多个 OpenType
字体资源的方法。字体集合的格式允许共享两种或多种字体之间相同的字体表。当要一起交付的字体共享许多共同的字形时，包含轮廓字形数据（TrueType、CFF、CFF2
或
SVG）的字体集合最有用。通过允许多种字体共享字形集和其他常用字体表，字体集合可以显着节省文件空间。

例如，一组日文字体可能每个都有自己的假名字形设计，但共享相同的汉字设计。对于普通的
OpenType
字体文件，包含常见汉字字形的唯一方法是将其字形数据复制到每种字体中。由于汉字代表的数据比假名多得多，这会导致大量重复字形数据的浪费。字体集合被定义来解决这个问题。

   *注意：* 尽管字体集合的原始定义（作为 TrueType
   规范的一部分）旨在与包含 TrueType
   轮廓的字体一起使用，并且此约束在早期的 OpenType
   版本中得到维护，但这不再是 OpenType
   中的约束。字体集合文件可能包含各种类型的轮廓（或它们的混合），无论字体是否存在布局表。

..

   *注意：*\ 一个 OpenType
   可变字体在功能上等同于多个非可变字体。可变字体不需要包含在集合文件中。然而，集合文件可以包含一种甚至多种可变字体，甚至可以组合可变字体和非可变字体。

字体集合文件结构
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

一个字体集合文件由一个 TTC Header
表、一个或多个表目录（每个对应不同的字体资源）和许多 OpenType
表组成。TTC Header 必须位于 TTC 文件的开头。

TTC
文件必须包含每个字体资源的完整表目录。集合文件中的每种字体使用与非集合文件中相同的
TableDirectory 格式。TTC 文件中所有表目录中的表偏移量是从 TTC
文件的开头测量的。

TTC 文件中的每个 OpenType 表都通过使用该表的每个字体的表目录来引用。一些
OpenType 表必须出现多次，对于 TTC 中包含的每种字体一次；而其他表格可能由
TTC 中的多种字体共享。

例如，考虑一个 TTC 文件，它结合了两种日文字体（Font1 和
Font2）。字体具有不同的假名设计（Kana1 和
Kana2），但对汉字使用相同的设计。TTC
文件包含一个“glyf”表，其中包括假名和汉字的两种设计；两种字体的表目录都指向这个“glyf”表。但是每种字体的表目录指向不同的“cmap”表，该表标识要使用的字形集。Font1
的 'cmap' 表指向假名字形的 'loca' 和 'glyf' 表的 Kana1
区域，以及日本汉字的 kanji 区域。Font2 的 'cmap' 表指向假名字形的 'loca'
和 'glyf' 表的 Kana2 区域，而对于 kanji 则指向相同的 kanji 区域。

每个字体应该有一个唯一副本的表是系统在识别字体及其字符映射时使用的表，包括“cmap”、“name”和
OS/2。TTC
中应该由字体共享的表是那些定义字形和指令数据或使用字形索引来访问数据的表：'glyf'、'loca'、'hmtx'、'hdmx'、LTSH、'cvt'、'
fpgm'、'prep'、EBLC、EBDT、EBSC、'maxp'
等等。实际上，任何具有两种或多种字体的相同数据的表都可以共享。

从单独的字体文件构建集合文件时，必须密切注意字体中的字形重新编号问题以及可能导致的“cmap”表和其他地方的副作用。要合并的字体还必须具有兼容的
TrueType 指令；也就是说，它们的预程序、函数定义和控制值不得冲突。

包含 TrueType 字形轮廓的集合文件应使用文件名后缀 .TTC。包含 CFF 或 CFF2
大纲的集合文件应使用文件扩展名 .OTC。

TTC 标头
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

TTC Header 有两个版本： 1.0 版已用于没有数字签名的 TTC 文件。2.0
版可用于带\ *或*\ 不带数字签名的 TTC 文件——如果没有签名，则 2.0
版标头的最后三个字段为空。

如果使用数字签名，则文件的 DSIG 表必须位于 TTC
文件的末尾，紧随任何其他字体表。TTC 文件中的签名应为格式 1 签名。

TTC Header 表的目的是在 TTC 文件中定位不同的表目录。TTC 标头位于 TTC
文件的开头（偏移量 = 0）。它由一个标识标签、一个版本号、文件中 OpenType
字体数量的计数以及每个 .

*TTC 标头版本 1.0：*

+----------+----------------------------+----------------------------+
| 类型     | 姓名                       | 描述                       |
+----------+----------------------------+----------------------------+
| 标签     | ttc标签                    | 字体集合 ID                |
|          |                            | 字符串：'ttcf'（用于具有   |
|          |                            | CFF 或 CFF2 轮廓以及       |
|          |                            | TrueType 轮廓的字体）      |
+----------+----------------------------+----------------------------+
| uint16   | 主要版本                   | TTC 标头的主要版本，= 1。  |
+----------+----------------------------+----------------------------+
| uint16   | 次要版本                   | TTC 标头的次要版本，= 0。  |
+----------+----------------------------+----------------------------+
| uint32   | numFonts                   | TTC 中的字体数量           |
+----------+----------------------------+----------------------------+
| 偏移量32 | table                      | 每个字体从文件开头到       |
|          | DirectoryOffsets[numFonts] | TableDirectory             |
|          |                            | 的偏移量数组               |
+----------+----------------------------+----------------------------+

*TTC 标头 2.0 版：*

+----------+----------------------------+----------------------------+
| 类型     | 姓名                       | 描述                       |
+----------+----------------------------+----------------------------+
| 标签     | ttc标签                    | 字体集合 ID 字符串：'ttcf' |
+----------+----------------------------+----------------------------+
| uint16   | 主要版本                   | TTC 标头的主要版本，= 2。  |
+----------+----------------------------+----------------------------+
| uint16   | 次要版本                   | TTC 标头的次要版本，= 0。  |
+----------+----------------------------+----------------------------+
| uint32   | numFonts                   | TTC 中的字体数量           |
+----------+----------------------------+----------------------------+
| 偏移量32 | table                      | 每个字体从文件开头到       |
|          | DirectoryOffsets[numFonts] | TableDirectory             |
|          |                            | 的偏移量数组               |
+----------+----------------------------+----------------------------+
| uint32   | dsigTag                    | 表示存在 DSIG              |
|          |                            | 表的标记，0x44534947       |
|          |                            | ('                         |
|          |                            | DSIG')（如果没有签名，则为 |
|          |                            | null）                     |
+----------+----------------------------+----------------------------+
| uint32   | dsigLength                 | DSIG                       |
|          |                            | 表的长度（以字节为         |
|          |                            | 单位）（如果没有签名，则为 |
|          |                            | null）                     |
+----------+----------------------------+----------------------------+
| uint32   | dsigOffset                 | DSIG 表从 TTC              |
|          |                            | 文件开头的偏移量（以字节为 |
|          |                            | 单位）（如果没有签名，则为 |
|          |                            | null）                     |
+----------+----------------------------+----------------------------+

字体表
---------------------------

所需表格
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

无论是在 OpenType 字体中使用 TrueType 还是 CFF
轮廓，都需要下表才能使字体正常工作：

==================== ========================
标签                 姓名
`'cmap' <cmap>`__    字符到字形映射
`'head' <head>`__    字体头
`'hhea' <hhea>`__    水平头
`'hmtx' <hmtx>`__    水平指标
`'maxp' <maxp>`__    最大轮廓
`'name' <name>`__    名称表
`OS/2 <os2>`__       OS/2 和 Windows 特定指标
`'post' <post>`__    PostScript 信息
==================== ========================

与 TrueType 大纲相关的表格
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

对于基于 TrueType 轮廓的 OpenType 字体，使用下表：

================= ===========================
标签              姓名
`'cvt ' <cvt>`__  控制值表（可选表）
`'fpgm' <fpgm>`__ 字体程序（可选表）
`“glyf” <glyf>`__ 字形数据
`'loca' <loca>`__ 位置索引
`“prep” <prep>`__ CVT 程序（可选表）
`'gasp' <gasp>`__ 网格拟合/扫描转换（可选表）
================= ===========================

与 CFF 大纲相关的表格
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

对于基于 CFF 轮廓的 OpenType 字体，使用下表：

================= ==================
标签              姓名
`'CFF' <cff>`__   紧凑字体格式 1.0
`CFF2 <cff2>`__   紧凑字体格式 2.0
`VORG <vorg>`__   垂直原点（可选表）
================= ==================

强烈建议用于垂直书写的 CFF OpenType 字体包含\ `Vertical Origin (VORG)
表 <vorg>`__\ 。

与 SVG 大纲相关的表格
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

=============== =======================
标签            姓名
`'SVG' <svg>`__ SVG（可缩放矢量图形）表
=============== =======================

与位图字形相关的表格
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

================= ==================
标签              姓名
`EBDT <ebdt>`__   嵌入位图数据
`EBLC <eblc>`__   嵌入位图位置数据
`EBSC <ebsc>`__   嵌入式位图缩放数据
`CBDT <cbdt>`__   彩色位图数据
`CBLC <cblc>`__   彩色位图位置数据
`'sbix' <sbix>`__ 标准位图图形
================= ==================

除了轮廓之外，OpenType 字体还可能包含字形位图。手动调整的位图在 OpenType
字体中特别有用，用于以非常小的尺寸表示复杂的字形。如果在字体中提供了特定大小的位图，系统将在渲染字形时使用它而不是轮廓。

高级排版表
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

几个可选表格支持高级排版功能：

======================= ============
标签                    姓名
`BASE <base>`__         基线数据
`GDEF <gdef>`__         字形定义数据
`GPOS <gpos>`__         字形定位数据
`GSUB <gsub>`__         字形替换数据
`JSTF <jstf>`__         对齐数据
`MATH <math>`__         数学布局数据
======================= ============

有关常用表格格式的信息，请参阅\ `OpenType
布局常用表格格式 <chapter2>`__\ 。

用于 OpenType 字体变体的表格
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

=================== ========================================
标签                姓名
`'avar' <avar>`__   轴变化
`'cvar' <cvar>`__   CVT 变体（仅限 TrueType 轮廓）
`'fvar' <fvar>`__   字体变化
`'gvar' <gvar>`__   字形变体（仅限 TrueType 轮廓）
`HVAR <hvar>`__     水平指标变化
`MVAR <mvar>`__     指标变化
`STAT <stat>`__     样式属性（可变字体需要，非可变字体可选）
`VVAR <vvar>`__     垂直指标变化
=================== ========================================

有关 OpenType
字体变体的概述和用于变体的插值算法的规范，请参阅\ `OpenType
字体变体概述 <otvaroverview>`__\ 。有关可变字体中哪些表是必需或可选的详细信息，请参阅概述一章中的\ `变体数据表和其他要求 <otvaroverview#vartables>`__\ 。

有关用于变体的常用表格格式的信息，请参阅\ `OpenType Font Variations
Common Table Formats <otvarcommonformats>`__\ 。

请注意，某些与变体相关的格式可能会在上面列出的变体特定表格之外的表格中使用。特别是，可变字体的
GDEF 或 BASE 表格可以包括使用通用表格格式的变化数据。可变字体的 CFF2
表也可以包含变化数据，尽管使用 CFF2 表特定的格式。

与颜色字体相关的表格
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

================= =======================
标签              姓名
`COLR <colr>`__   颜色表
`CPAL <cpal>`__   调色板表
`CBDT <cbdt>`__   彩色位图数据
`CBLC <cblc>`__   彩色位图位置数据
`'sbix' <sbix>`__ 标准位图图形
`'SVG' <svg>`__   SVG（可缩放矢量图形）表
================= =======================

请注意，这些表中的一些也列在与 SVG
轮廓相关的表和与位图字形相关的表的其他部分中。

其他 OpenType 表
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

=================== ============
标签                姓名
`DSIG <dsig>`__     电子签名
`'hdmx' <hdmx>`__   水平设备指标
`'kern' <kern>`__   字距调整
`LTSH <ltsh>`__     线性阈值数据
`MERG <merg>`__     合并
`'meta' <meta>`__   元数据
`STAT <stat>`__     样式属性
`PCLT <pclt>`__     PCL 5 数据
`VDMX <vdmx>`__     垂直设备指标
`'vhea' <vhea>`__   垂直指标标题
`'vmtx' <vmtx>`__   垂直指标
=================== ============

请注意，可变字体需要 STAT 表。此外，“hdmx”和 VDMX 表不用于可变字体。
